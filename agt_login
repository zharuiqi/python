# !/usr/bin/env python
# encoding:utf-8
import numpy as np
import random
from selenium.webdriver import ActionChains
import unittest
import time
from selenium import webdriver
from PIL import Image
import os
from selenium.webdriver.support.ui import WebDriverWait
import cv2
import userinfo


class Login (unittest.TestCase):
    def setUp(self):
        # url地址
        self.driver = webdriver.Chrome()
        self.driver.maximize_window()
        self.url = "http://192.168.1.246/pigx-pyp-ui/#/login"
        self.driver.implicitly_wait(30)

    @staticmethod
    def show(name):
        cv2.imshow('Show', name)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    @staticmethod
    def webdriverwait_send_keys(dri, element, value):
        """
        显示等待输入
        :param dri: driver
        :param element:
        :param value:
        :return:
        """
        WebDriverWait(dri, 10, 5).until(lambda dr: element).send_keys(value)

    @staticmethod
    def webdriverwait_click(dri, element):
        """
        显示等待 click
        :param dri: driver
        :param element:
        :return:
        """
        WebDriverWait(dri, 10, 5).until(lambda dr: element).click()

    @staticmethod
    def get_postion(chunk, canves):
        """
        判断缺口位置
        :param chunk: 缺口图片是原图
        :param canves:
        :return: 位置 x, y
        """
        otemp = chunk
        oblk = canves
        target = cv2.imread(otemp, 0)
        template = cv2.imread(oblk, 0)
        # w, h = target.shape[::-1]
        temp = 'temp.jpg'
        targ = 'targ.jpg'
        cv2.imwrite(temp, template)
        cv2.imwrite(targ, target)
        target = cv2.imread(targ)
        target = cv2.cvtColor(target, cv2.COLOR_BGR2GRAY)
        target = abs(255 - target)
        cv2.imwrite(targ, target)
        target = cv2.imread(targ)
        template = cv2.imread(temp)
        result = cv2.matchTemplate(target, template, cv2.TM_CCOEFF_NORMED)
        x, y = np.unravel_index(result.argmax(), result.shape)
        return x, y
        # # 展示圈出来的区域
        # cv2.rectangle(template, (y, x), (y + w, x + h), (7, 249, 151), 2)
        # cv2.imwrite("yuantu.jpg", template)
        # show(template)

    @staticmethod
    def get_track(distance):
        """
        模拟轨迹 假装是人在操作
        :param distance:
        :return:
        """
        # 初速度
        v = 0
        # 单位时间为0.2s来统计轨迹，轨迹即0.2内的位移
        t = 0.2
        # 位移/轨迹列表，列表内的一个元素代表0.2s的位移
        tracks = []
        # 当前的位移
        current = 0
        # 到达mid值开始减速
        mid = distance * 7 / 8

        distance += 10  # 先滑过一点，最后再反着滑动回来
        # a = random.randint(1,3)
        while current < distance:
            if current < mid:
                # 加速度越小，单位时间的位移越小,模拟的轨迹就越多越详细
                a = random.randint(2, 4)  # 加速运动
            else:
                a = -random.randint(3, 5)  # 减速运动

            # 初速度
            v0 = v
            # 0.2秒时间内的位移
            s = v0 * t + 0.5 * a * (t ** 2)
            # 当前的位置
            current += s
            # 添加到轨迹列表
            tracks.append(round(s))

            # 速度已经达到v,该速度作为下次的初速度
            v = v0 + a * t

        # 反着滑动到大概准确位置
        for i in range(4):
            tracks.append(-random.randint(2, 3))
        for i in range(4):
            tracks.append(-random.randint(1, 3))
        return tracks

    @staticmethod
    def urllib_download(imgurl, imgsavepath):
        """
        下载图片
        :param imgurl: 图片url
        :param imgsavepath: 存放地址
        :return:
        """
        from urllib.request import urlretrieve
        urlretrieve(imgurl, imgsavepath)

    def test_login_case(self):
        u"""管理后台登陆"""
        global un, pw
        driver = self.driver
        driver.implicitly_wait(30)
        driver.get(self.url)
        url = self.url
        if url == 'http://192.168.1.246/pigx-pyp-ui/#/login':
            pass
        else:
            print("网页打打开失败")
        # 获取title
        title = driver.title
        if title == '代理商管理系统':
            pass
        else:
            print("页面错误")
        time.sleep(3)
        click_keyi_username = driver.find_element_by_css_selector(
            "button[class='el-button login-submit el-button--primary el-button--small']")
        self.webdriverwait_click(driver, click_keyi_username)

        info = userinfo.zidian()
        for un, pw in info.items():
            pass
        # 清空输入框
        driver.find_element_by_css_selector("input[placeholder='请输入用户名']").clear()
        driver.find_element_by_css_selector("input[placeholder='请输入用户名']").send_keys(un)
        driver.find_element_by_css_selector("input[type='password']").clear()
        driver.find_element_by_css_selector("input[type='password']").send_keys(pw)
        driver.find_element_by_css_selector("button[type='button']").click()
        time.sleep(4)

        driver.switch_to.frame(driver.find_element_by_id('tcaptcha_iframe'))  # switch 到 滑块frame
        time.sleep(0.5)
        bk_block = driver.find_element_by_xpath('//img[@id="slideBg"]')  # 大图
        web_image_width = bk_block.size
        web_image_width = web_image_width['width']
        bk_block_x = bk_block.location['x']

        slide_block = driver.find_element_by_xpath('//img[@id="slideBlock"]')  # 小滑块
        slide_block_x = slide_block.location['x']

        bk_block = driver.find_element_by_xpath('//img[@id="slideBg"]').get_attribute('src')  # 大图 url
        slide_block = driver.find_element_by_xpath('//img[@id="slideBlock"]').get_attribute('src')  # 小滑块 图片url
        slid_ing = driver.find_element_by_xpath('//div[@id="tcaptcha_drag_thumb"]')  # 滑块

        os.makedirs('./image/', exist_ok=True)
        self.urllib_download(bk_block, './image/bkBlock.png')
        self.urllib_download(slide_block, './image/slideBlock.png')
        time.sleep(0.5)
        img_bkblock = Image.open('./image/bkBlock.png')
        real_width = img_bkblock.size[0]
        width_scale = float(real_width) / float(web_image_width)
        position = self.get_postion('./image/bkBlock.png', './image/slideBlock.png')
        real_position = position[1] / width_scale
        real_position = real_position - (slide_block_x - bk_block_x)
        track_list = self.get_track(real_position + 4)

        ActionChains(driver).click_and_hold(on_element=slid_ing).perform()  # 点击鼠标左键，按住不放
        time.sleep(0.2)
        # print('第二步,拖动元素')
        for track in track_list:
            ActionChains(driver).move_by_offset(xoffset=track, yoffset=0).perform()  # 鼠标移动到距离当前位置（x,y）
            time.sleep(0.002)
        # ActionChains(driver).move_by_offset(xoffset=-random.randint(0, 1), yoffset=0).perform()   # 微调，根据实际情况微调
        time.sleep(1)
        # print('第三步,释放鼠标')
        ActionChains(driver).release(on_element=slid_ing).perform()
        time.sleep(5)
        username = driver.find_element_by_xpath("/html/body/div/div/div/div/div[3]/div[6]/span").text
        if str(username) == str(un):
            print("登陆成功!")
        else:
            print("登陆失败.....!")
        time.sleep(1)

    def test_out_case(self):
        u"""管理后台退出"""
        self.test_login_case()
        time.sleep(1)
        mouse = self.driver.find_element_by_css_selector("span[class = 'el-dropdown-link el-dropdown-selfdefine']")
        ActionChains(self.driver).move_to_element(mouse).perform()
        time.sleep(1)
        lis = self.driver.find_elements_by_css_selector("li[class = 'el-dropdown-menu__item el-dropdown-menu__item--divided']")
        time.sleep(1)
        lis[1].click()
        time.sleep(1)
        self.driver.find_element_by_css_selector("button[class = 'el-button el-button--default el-button--small el-button--primary ']").click()
        time.sleep(1)
        url = self.driver.current_url
        if url == "https://agent.omlife.com.cn/pigx-pyp-ui/#/login":
            print("退出成功")
        else:
            print("退出失败")
        self.driver.close()
        time.sleep(1)

    def test_dept_case(self):
        u"""合作商管理"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div/div/div[2]/div/div/ul/div/li[2]/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[2]/ul/li[1]").click()
        time.sleep(1)
        title = "新增合作商——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[2]/ul/li[2]").click()
        time.sleep(1)
        title = "合作商列表——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[2]/div[2]/div[1]/div/div/div[1]/div[1]/button").click()   # 点击搜索按钮
        time.sleep(2)
        self.assertIsNotNone(driver.find_element_by_xpath("/html/body/div/div/div[2]/div[2]/div[2]/div[1]/div/div/div[1]/div[2]/div[3]/table/tbody/1"), msg="未搜索到数据")
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[2]/ul/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[2]/ul/div/li/ul/li").click()
        time.sleep(1)
        title = "审核——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[2]/div[2]/div[1]/div/div/div[1]/div[1]/button[1]").click()  # 点击搜索按钮
        time.sleep(1)

    def test_user_case(self):
        u"""账户管理"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[3]/div/span").click()
        time.sleep(1)
        driver.find_element_by_xpath("html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[3]/ul/li/span").click()
        time.sleep(1)
        title = '账户明细查询——代理商管理系统'
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        time.sleep(1)

    def test_profit_case(self):
        u"""收益管理"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[4]/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[4]/ul/li[1]").click()
        time.sleep(1)
        title = '收益导入——代理商管理系统'
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[4]/ul/li[2]").click()
        time.sleep(1)
        title = "收益导入审核——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[4]/ul/li[3]").click()
        time.sleep(1)
        title = "收益审核记录——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[4]/ul/li[4]").click()
        time.sleep(1)
        title = "收益明细查询——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        time.sleep(1)

    def test_channel_case(self):
        u"""渠道数据管理"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[5]/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[5]/ul/li[1]").click()
        time.sleep(1)
        title = "交易数据查询——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[5]/ul/li[2]").click()
        time.sleep(1)
        title = "激活返现数据查询——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        time.sleep(1)

    def test_merchant_case(self):
        u"""商户管理"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[6]/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[6]/ul/li[1]").click()
        time.sleep(1)
        title = "商户数据上传——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[6]/ul/li[2]").click()
        time.sleep(1)
        title = "商户明细——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        time.sleep(1)

    def test_sn_case(self):
        u"""标签管理"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[7]/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[7]/ul/li[1]").click()
        time.sleep(1)
        title = "标签入库——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[7]/ul/li[2]").click()
        time.sleep(1)
        title = "标签查询——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[7]/ul/li[3]").click()
        time.sleep(1)
        title = "标签调拨——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        time.sleep(1)

    def test_assemble_case(self):
        u"""拼团数据查询"""
        self.test_login_case()
        driver = self.driver
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[8]/div").click()
        time.sleep(1)
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[8]/ul/li[1]").click()
        time.sleep(1)
        title = "拼团机构数据查询——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        driver.find_element_by_xpath("/html/body/div/div/div[2]/div[1]/div/div[2]/div[1]/div/ul/div/li[8]/ul/li[2]").click()
        time.sleep(1)
        title = "拼团商户数据查询——代理商管理系统"
        self.assertEqual(title, driver.title, msg="标题不一致，页面打开失败")
        time.sleep(1)

    def tearDown(self):
        self.driver.quit()


if __name__ == '__main__':
    unittest.main
